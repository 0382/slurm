#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test that switch windows in use are not re-used.
############################################################################
# Copyright (C) 2005-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

#
# Report the slurm network and use it to establish window parameters
#
# windows_per_node    - switch windows available per node
# windows_iterations - job steps to run after initial switch window allocation
#                       for a persistent job step
# windows_used        - switch windows to use per job step
# step_delay          - run time of persistent job step (seconds)
#

set windows_per_node 0
set windows_iterations 5
set windows_used 4
set step_delay 10
set job_id 0

if {[get_config_param "SwitchType"] ne "switch/none"} {
	skip "This test requires SwitchType = switch/none"
}

proc cleanup {} {
	global job_id

	cancel_job $job_id
}

# Spawn an salloc job (with --no-shell) and obtain the job id
set salloc_output [run_command_output -fail "$salloc -N1 -t2 -v --no-shell"]
if {![regexp {Granted job allocation (\d+)} $salloc_output - job_id]} {
    fail "Allocation not granted ($output)"
}

# Start initial job step to claim some switch windows
run_command -fail "nohup $srun --jobid $job_id -N1 -O -n$windows_used -N6 --immediate $bin_sleep $step_delay &"

# start more job steps to check see if any switch window conflicts occur
for {set inx 0} {$inx < $windows_iterations} {incr inx} {
	run_command -fail "$srun --jobid $job_id -N1 -O -n$windows_used true"
}
