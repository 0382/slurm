#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of processors, memory, and temporary disk space
#          constraints options (--mincpus, --mem, and --tmp options).
#          Also test that priority zero job is not started (--hold
#          option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2002-2006 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "15.7"
set job_id      0

set cpu_cnt     1
set mem_size    13
set tmp_size    2
set matches     0

print_header $test_id

proc end_it {exit_code} {
	global job_id test_id

	if {$job_id} {
		cancel_job $job_id
	}

	if {$exit_code == 0} {
		print_success $test_id
	}
	exit $exit_code
}

proc sbatch_mem_error {arg} {
	global sbatch test_id number global_exit_code job_id

	set matches 0
	set job_id 0

	set cmd "$sbatch -Jtest$test_id --wrap=hostname $arg"
	set sbatch_pid [spawn {*}$cmd]
	expect {
		-re "Submitted batch job ($number)" {
			set job_id $expect_out(1,string)
		}
		"sbatch: error: Invalid" {
			incr matches
		}
		timeout {
			log_error "FAILURE: sbatch not responding"
			slow_kill $sbatch_pid
			end_it 1
		}
		eof {
			wait
		}
	}
	if {$job_id} {
		log_error "job shouldn't have submitted (cmd:$cmd)"
		end_it 1
	}
	if {$matches != 1} {
		log_error "job should have errored with arg '$arg'"
		end_it 1
	}
}

#
# Spawn a salloc job with constraints
#
set salloc_pid [spawn $salloc --mincpus=$cpu_cnt --mem=$mem_size --tmp=$tmp_size --hold -t1 $bin_id]
expect {
	-re "Pending job allocation ($number)" {
		set job_id $expect_out(1,string)
	}
	-re "uid=" {
		send_user "\nFAILURE: salloc --hold option ineffective\n"
		end_it 1
	}
	timeout {
		send_user "\nFAILURE: salloc not responding\n"
		slow_kill [expr 0 - $salloc_pid]
		end_it 1
	}
	eof {
		wait
	}
}
if {$job_id == 0} {
	send_user "\nFAILURE: salloc submit failure\n"
	exit 1
}

#
# Confirm constraints are registered and wait for job completion
#
spawn $scontrol show job $job_id
expect {
	-re "Priority=($number)" {
		set read_prio $expect_out(1,string)
		if {$read_prio == 0} {
			incr matches
			send_user "match of Priority\n"
		}
		exp_continue
	}
	-re "JobState=PENDING" {
		incr matches
		send_user "match of JobState\n"
		exp_continue
	}
	-re "MinCPUsNode=($number)" {
		set read_cpus $expect_out(1,string)
		if {$read_cpus == $cpu_cnt} {
			incr matches
			send_user "match of MinCPUsNode\n"
		}
		exp_continue
	}
	-re "MinMemoryNode=($number)" {
		set read_mem $expect_out(1,string)
		if {$read_mem == $mem_size} {
			incr matches
			send_user "match of MinMemory\n"
		}
		exp_continue
	}
	-re "MinTmpDiskNode=($number)" {
		set read_disk $expect_out(1,string)
		if {$read_disk == $tmp_size} {
			incr matches
			send_user "match of MinTmpDiskNode\n"
		}
		exp_continue
	}
	timeout {
		send_user "\nFAILURE: scontrol not responding\n"
		end_it 1
	}
	eof {
		wait
	}
}
if {$matches != 5} {
	send_user "\nFAILURE: Did not get constraints ($matches of 5)\n"
	end_it 1
}
if {[cancel_job $job_id] != 0} {
	end_it 1
}

sbatch_mem_error "--mem="
sbatch_mem_error "--mem=1gggggg"
sbatch_mem_error "--mem=memory"
sbatch_mem_error "--mem=-1"
sbatch_mem_error "--mem-per-cpu="
sbatch_mem_error "--mem-per-cpu=1gggggg"
sbatch_mem_error "--mem-per-cpu=memory"
sbatch_mem_error "--mem-per-cpu=-1"

end_it 0
